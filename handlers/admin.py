import logging
from loader import dp, bot
from aiogram import types, Dispatcher
from aiogram.types import CallbackQuery
from keyboards.default_keyboard import admin_menu
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher import filters
from aiogram.types import InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.work_with_db import DataBase
from pathlib import Path


myself = Path(__file__).resolve()
db = DataBase()

logger = logging.getLogger('app.handlers.admin')

class UserBlock(StatesGroup):
	user_id = State()

class ChangeBalance(StatesGroup):
	user_id = State()
	new_balance = State()



async def admin(message : types.Message):
	if await db.check_permission():
		await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
		await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup = admin_menu)



async def user_block(message : types.Message, state : FSMContext):    	
	if message.text == "‚öñÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
		await UserBlock.user_id.set()
		await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ')

@dp.message_handler(content_types = ['text'], state=UserBlock.user_id)
async def enter_id(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data["user_id"] = message.text
	async with state.proxy() as data:
		await db.change_permission(data["user_id"])
		await bot.send_message(message.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["user_id"]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
	await state.finish()



async def change_balance(message : types.Message, state : FSMContext):    	
	if message.text == "üí≥–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
		await ChangeBalance.user_id.set()
		await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: ')

@dp.message_handler(content_types = ['text'], state=ChangeBalance.user_id)
async def change_balance_set(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data["user_id"] = message.text
	await ChangeBalance.next()
	await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ")

@dp.message_handler(content_types = ['text'], state=ChangeBalance.new_balance)
async def change_balance_user_id(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data["new_balance"] = message.text
	async with state.proxy() as data:
		await db.change_balance(data["user_id"], data["new_balance"])
		await bot.send_message(message.from_user.id, f'–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å id: {data["user_id"]} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - {data["new_balance"]}')
	await state.finish()




async def admin_menu_handler(message : types.Message):
	if message.text == "üìã–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
		user_list = await db.get_user_list()
		for user in user_list:
			await message.answer(f'id: {user[0]} balance: {user[1]}')

	elif message.text == "üì§–í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤":
		try:
			with open('logs/all_info.log', 'rb') as file:
				await bot.send_document(message.from_user.id, ('all_info.log', file))
		except Exception as ex:
			logger.info(ex)
		try:
			with open('logs/only_warnings.log', 'rb') as file:
				await bot.send_document(message.from_user.id, ('all_info.log', file))
		except Exception as ex:
			logger.info(ex)



def register_handlers_admin(dp : Dispatcher):
	dp.register_message_handler(admin, commands = ["admin"])
	dp.register_message_handler(user_block, filters.Text(startswith = '‚öñÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'))
	dp.register_message_handler(change_balance, filters.Text(startswith = 'üí≥–ò–∑–º–µ–Ω–∏—Ç—å'))
	dp.register_message_handler(admin_menu_handler)
	